class SwatMPVotingPanel extends SwatGUIPanel
    Config(SwatGui);

import enum EMPMode from Engine.Repo;

var(SWATGui) private EditInline Config GUIListBox TeamMembers;

var(SWATGui) private EditInline Config GUIButton KickButton;
var(SWATGui) private EditInline Config GUIButton BanButton;
var(SWATGui) private EditInline Config GUIButton LeaderButton;

var(SWATGui) private EditInline Config GUIListBox MapList;
var(SWATGui) private EditInline Config GUIComboBox GameTypes;
var(SWATGui) private EditInline Config GUIButton MapButton;

var(SWATGui) private EditInline Config GUILabel ReferendumDetails;
var(SWATGui) private EditInline Config GUIButton VoteYesButton;
var(SWATGui) private EditInline Config GUIButton VoteNoButton;

var(SWATGui) private EditInline Config GUIButton BackgroundLeft;
var(SWATGui) private EditInline Config GUIButton BackgroundRight;
var(SWATGui) private EditInline Config GUIButton BackgroundCenter;

var private bool bInitialisingGameTypes;

var(DEBUG) private GUIList FullMapList;

var private bool bPrevEnabled;

function InitComponent(GUIComponent MyOwner)
{
	super.InitComponent(MyOwner);

	FullMapList = GUIList(AddComponent("GUI.GUIList", self.Name$"_FullMapList", true ));

    LoadFullMapList();

	KickButton.OnClick = OnKickButtonClicked;
	BanButton.OnClick = OnBanButtonClicked;
	LeaderButton.OnClick = OnLeaderButtonClicked;

	GameTypes.OnChange = OnGameTypesChange;
	MapButton.OnClick = OnMapButtonClicked;

	VoteYesButton.OnClick = OnVoteYesClicked;
	VoteNoButton.OnClick = OnVoteNoClicked;
}

private function LoadFullMapList()
{
	local LevelSummary Summary;
	local string FileName;

    FullMapList.Clear();
    
    foreach FileMatchingPattern( "*.s4m", FileName )
    {
        //skip autoplay files (auto generated by UnrealEd)
        if( InStr( FileName, "autosave" ) != -1 )
            continue;
    
        //remove the extension
        if(Right(FileName, 4) ~= ".s4m")
			FileName = Left(FileName, Len(FileName) - 4);

        Summary = Controller.LoadLevelSummary(FileName$".LevelSummary");
        
        if( Summary == None )
        {
            log( "WARNING: Could not load a level summary for map '"$FileName$".s4m'" );
        }
        else
        {
            FullMapList.Add( FileName, Summary, Summary.Title );
        }
    }
}

event Timer()
{
	// Update the team members list every second
    InitialiseTeamMembers();

	// Modify the voting display based on the state of the current referendum
	SetVotingEnabled();
}

private function SetVotingEnabled(optional bool bForceRefresh)
{
	local SwatGameReplicationInfo SGRI;
	local ServerSettings Settings;
	local bool bEnabled;

	SGRI = SwatGameReplicationInfo(PlayerOwner().GameReplicationInfo);
	Settings = ServerSettings(PlayerOwner().Level.CurrentServerSettings);

	if (SGRI == None || SGRI.RefMgr == None)
	{
		bEnabled = true;
	}
	else
	{
		bEnabled = !SGRI.RefMgr.ReferendumActive();
	}

	if (bEnabled != bPrevEnabled || bForceRefresh)
	{
		TeamMembers.SetVisibility(bEnabled);
		TeamMembers.SetEnabled(bEnabled);

		KickButton.SetVisibility(bEnabled);
		KickButton.SetEnabled(bEnabled);

		BanButton.SetVisibility(bEnabled);
		BanButton.SetEnabled(bEnabled);

		LeaderButton.SetVisibility(bEnabled && SGRI.Level.IsPlayingCOOP && !Settings.bNoLeaders);
		LeaderButton.SetEnabled(bEnabled && SGRI.Level.IsPlayingCOOP && !Settings.bNoLeaders);

		MapList.SetVisibility(bEnabled);
		MapList.SetEnabled(bEnabled);

		GameTypes.SetVisibility(bEnabled);
		GameTypes.SetEnabled(bEnabled);

		MapButton.SetVisibility(bEnabled);
		MapButton.SetEnabled(bEnabled);

		BackgroundLeft.SetVisibility(bEnabled);
		BackgroundRight.SetVisibility(bEnabled);

		ReferendumDetails.SetVisibility(!bEnabled);
		ReferendumDetails.SetEnabled(!bEnabled);

		VoteYesButton.SetVisibility(!bEnabled);
		VoteYesButton.SetEnabled(!bEnabled);

		VoteNoButton.SetVisibility(!bEnabled);
		VoteNoButton.SetEnabled(!bEnabled);

		BackgroundCenter.SetVisibility(!bEnabled);

		bPrevEnabled = bEnabled;
	}

	if (!bEnabled)
		ReferendumDetails.SetCaption(SGRI.RefMgr.GetReferendumDescription() $ " - " $ SGRI.RefMgr.GetNumberOfYesVotes() $ "/" $ SGRI.RefMgr.GetNumberOfNoVotes());
}

private function InternalOnActivate()
{
	InitialiseTeamMembers();
	InitialiseGameTypes();

	SetVotingEnabled(true);

	SetTimer(1.0, true);
	
	if (SwatGUIController(Controller).coopcampaign)
	{
		SetVotingEnabled(false);
		
		MapList.Hide();
		MapList.DisableComponent();
		
		GameTypes.Hide();
		GameTypes.DisableComponent();
		
		MapButton.Hide();
		MapButton.DisableComponent();
		
		BackgroundRight.Hide();
		BackgroundRight.DisableComponent();
	}
	else 
	{
		MapList.Show();
		MapList.EnableComponent();
		
		GameTypes.Show();
		GameTypes.EnableComponent();
		
		MapButton.Show();
		MapButton.EnableComponent();
		
		BackgroundRight.Show();
		BackgroundRight.EnableComponent();
	}
}

private function InternalOnDeActivate()
{
    KillTimer();
}

private function InitialiseTeamMembers()
{
	local String CurrentSelection;
	local int LocalPlayerTeamNumber;
	local SwatGameReplicationInfo SGRI;
	local SwatPlayerReplicationInfo PlayerInfo;
	local int i;

	CurrentSelection = TeamMembers.List.Get();

	TeamMembers.List.Clear();

	// Do nothing if we don't have access to the local players team data
	if (PlayerOwner() == None || PlayerOwner().PlayerReplicationInfo == None || NetTeam(PlayerOwner().PlayerReplicationInfo.Team) == None)
		return;

	LocalPlayerTeamNumber = NetTeam(PlayerOwner().PlayerReplicationInfo.Team).GetTeamNumber();

	SGRI = SwatGameReplicationInfo(PlayerOwner().GameReplicationInfo);
    
    if (SGRI == None)
        return;

	// Fill the team members list with the player names of the local players team members
	for (i = 0; i < ArrayCount(SGRI.PRIStaticArray); ++i)
    {
        PlayerInfo = SGRI.PRIStaticArray[i];

        if (PlayerInfo != None)
        {
			if (PlayerOwner().Level.IsPlayingCOOP ||
				(NetTeam(PlayerInfo.Team) != None && NetTeam(PlayerInfo.Team).GetTeamNumber() == LocalPlayerTeamNumber))
			{
				TeamMembers.List.Add(PlayerInfo.PlayerName);
			}
		}
	}

	// Keep the current selection intact
	if (CurrentSelection != "")
		TeamMembers.List.Find(CurrentSelection); // Find will select the item if it finds it :/
}

private function InitialiseGameTypes()
{
	local ServerSettings Settings;
	local int i;

    Settings = ServerSettings(PlayerOwner().Level.CurrentServerSettings);
    
    if (Settings == None)
        return;

	bInitialisingGameTypes = true;

	GameTypes.Clear();

	// When playing a coop map, only allow votes for other coop maps
	if (Settings.GameType == MPM_COOP)
	{
		GameTypes.AddItem(GC.GetGameModeName(MPM_COOP),,, int(EMPMode.MPM_COOP));
	}
	else
	{
		// Add all game types except for coop
		for( i = 0; i < EMPMode.EnumCount; ++i )
		{
			if (EMPMode(i) != MPM_Coop && EMPMode(i) != MPM_COOPQMM)
    			GameTypes.AddItem(GC.GetGameModeName(EMPMode(i)),,, i);
		}
	}

	bInitialisingGameTypes = false;

	GameTypes.SetIndex(0);
}

private function InitialiseMapList()
{
    local int i, j;
    local LevelSummary Summary;
	local EMPMode GameType;

    MapList.Clear();

	if (GameTypes.GetIndex() == -1)
		return;

	GameType = EMPMode(GameTypes.GetInt());

    for( i = 0; i < FullMapList.ItemCount; i++ )
    {
        Summary = LevelSummary( FullMapList.GetObjectAtIndex(i) );

        for( j = 0; j < Summary.SupportedModes.Length; j++ )
        {
            if( Summary.SupportedModes[j] == GameType )
            {
                MapList.List.AddElement( FullMapList.GetAtIndex(i) );
                break;
            }
        }
    }

    MapList.List.Sort();
	MapList.List.SetIndex(0);
}

private function OnKickButtonClicked(GUIComponent Sender)
{
	local String ReferendumTarget;

	ReferendumTarget = TeamMembers.List.Get();

	if (ReferendumTarget == "")
		return;

	if (SwatPlayerController(PlayerOwner()) == None)
		return;

	SwatPlayerController(PlayerOwner()).ServerStartKickReferendum(ReferendumTarget);

	if (SwatMPPage(Controller.TopPage()) != None)
		SwatMPPage(Controller.TopPage()).ResumeGame();
}

private function OnBanButtonClicked(GUIComponent Sender)
{
	local String ReferendumTarget;

	ReferendumTarget = TeamMembers.List.Get();

	if (ReferendumTarget == "")
		return;

	if (SwatPlayerController(PlayerOwner()) == None)
		return;

	SwatPlayerController(PlayerOwner()).ServerStartBanReferendum(ReferendumTarget);

	if (SwatMPPage(Controller.TopPage()) != None)
		SwatMPPage(Controller.TopPage()).ResumeGame();
}

private function OnLeaderButtonClicked(GUIComponent Sender)
{
	local String ReferendumTarget;

	if (!LeaderButton.bVisible)
		return;

	ReferendumTarget = TeamMembers.List.Get();

	if (ReferendumTarget == "")
		return;

	if (SwatPlayerController(PlayerOwner()) == None)
		return;

	SwatPlayerController(PlayerOwner()).ServerStartLeaderReferendum(ReferendumTarget);

	if (SwatMPPage(Controller.TopPage()) != None)
		SwatMPPage(Controller.TopPage()).ResumeGame();
}

private function OnMapButtonClicked(GUIComponent Sender)
{
	local String MapName;
	local EMPMode GameType;

	MapName = MapList.List.Get();

	if (MapName == "")
		return;

	if (GameTypes.GetIndex() == -1)
		return;

	GameType = EMPMode(GameTypes.GetInt());

	if (SwatPlayerController(PlayerOwner()) == None)
		return;

	SwatPlayerController(PlayerOwner()).ServerStartMapChangeReferendum(GameType, MapName);

	if (SwatMPPage(Controller.TopPage()) != None)
		SwatMPPage(Controller.TopPage()).ResumeGame();
}

private function OnVoteYesClicked(GUIComponent Sender)
{
	if (SwatPlayerController(PlayerOwner()) == None)
		return;

	SwatPlayerController(PlayerOwner()).ServerVoteYes();
}

private function OnVoteNoClicked(GUIComponent Sender)
{
	if (SwatPlayerController(PlayerOwner()) == None)
		return;

	SwatPlayerController(PlayerOwner()).ServerVoteNo();
}

private function OnGameTypesChange(GUIComponent Sender)
{
	if (bInitialisingGameTypes)
		return;

	InitialiseMapList();
}

defaultproperties
{
	OnActivate=InternalOnActivate
	OnDeactivate=InternalOnDeActivate
}